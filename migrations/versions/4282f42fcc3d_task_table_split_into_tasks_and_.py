"""task table split into tasks and instances

Revision ID: 4282f42fcc3d
Revises: 95717ed8afff
Create Date: 2019-07-23 11:47:44.973020

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4282f42fcc3d'
down_revision = '95717ed8afff'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('task_instances',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('hist_parent_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('force_refresh', sa.Boolean(), nullable=True),
    sa.Column('target_uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('task_started', sa.DateTime(), nullable=True),
    sa.Column('task_finished', sa.DateTime(), nullable=True),
    sa.Column('last_accessed', sa.DateTime(), nullable=True),
    sa.Column('result_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['hist_parent_id'], ['tasks.uuid'], ),
    sa.ForeignKeyConstraint(['result_id'], ['results.id'], ),
    sa.ForeignKeyConstraint(['target_uuid'], ['tasks.uuid'], ),
    sa.ForeignKeyConstraint(['task_uuid'], ['tasks.uuid'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('results', sa.Column('task_uuid', postgresql.UUID(as_uuid=True), nullable=True))
    op.drop_constraint('uq_results_task_type_task_parameters', 'results', type_='unique')
    op.create_foreign_key(None, 'results', 'tasks', ['task_uuid'], ['uuid'])
    op.drop_column('results', 'task_parameters')
    op.drop_column('results', 'task_type')
    op.add_column('tasks', sa.Column('report_id', sa.Integer(), nullable=True))
    op.add_column('tasks', sa.Column('result_id', sa.Integer(), nullable=True))
    op.create_unique_constraint('uq_task_type_task_parameters', 'tasks', ['task_type', 'task_parameters'])
    op.drop_constraint('tasks_target_uuid_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_user_id_fkey', 'tasks', type_='foreignkey')
    op.drop_constraint('tasks_hist_parent_id_fkey', 'tasks', type_='foreignkey')
    op.create_foreign_key(None, 'tasks', 'reports', ['report_id'], ['id'])
    op.create_foreign_key(None, 'tasks', 'results', ['result_id'], ['id'])
    op.drop_column('tasks', 'task_started')
    op.drop_column('tasks', 'hist_parent_id')
    op.drop_column('tasks', 'target_uuid')
    op.drop_column('tasks', 'task_finished')
    op.drop_column('tasks', 'user_id')
    op.drop_column('tasks', 'last_accessed')
    op.drop_column('tasks', 'force_refresh')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tasks', sa.Column('force_refresh', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('task_finished', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('target_uuid', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('hist_parent_id', postgresql.UUID(), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('task_started', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.create_foreign_key('tasks_hist_parent_id_fkey', 'tasks', 'tasks', ['hist_parent_id'], ['uuid'])
    op.create_foreign_key('tasks_user_id_fkey', 'tasks', 'users', ['user_id'], ['id'])
    op.create_foreign_key('tasks_target_uuid_fkey', 'tasks', 'tasks', ['target_uuid'], ['uuid'])
    op.drop_constraint('uq_task_type_task_parameters', 'tasks', type_='unique')
    op.drop_column('tasks', 'result_id')
    op.drop_column('tasks', 'report_id')
    op.add_column('results', sa.Column('task_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('results', sa.Column('task_parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'results', type_='foreignkey')
    op.create_unique_constraint('uq_results_task_type_task_parameters', 'results', ['task_type', 'task_parameters'])
    op.drop_column('results', 'task_uuid')
    op.drop_table('task_instances')
    # ### end Alembic commands ###
